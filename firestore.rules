rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles
    match /users/{userId} {
      // Allow any authenticated user to read any user profile (needed for messaging)
      // This is a simplification that enables messaging functionality
      allow read: if request.auth != null;

      // Users can update or create their own profile, but not the admin status
      allow create, update: if request.auth != null &&
                     request.auth.uid == userId &&
                     (!('isAdmin' in request.resource.data) ||
                      !request.resource.data.isAdmin);

      // Only admins can update admin status for any user
      allow update: if request.auth != null &&
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;

      // Projects subcollection
      match /projects/{projectId} {
        // Allow authenticated users with contractor role to read projects
        allow read: if request.auth != null &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "contractor";

        // Allow project owners to read/write their own projects
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Products
    match /products/{productId} {
      // Anyone can read products
      allow read: if true;
      // Only admins can write products
      allow write: if request.auth != null &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Paint Colors
    match /colors/{colorId} {
      // Anyone can read paint colors (public catalog)
      allow read: if true;
      // Only admins can write paint colors
      allow write: if request.auth != null &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Root-level projects collection
    match /projects/{projectId} {
      // Allow contractors to read all projects
      allow read: if request.auth != null &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "contractor";

      // Allow homeowners to create new projects
      allow create: if request.auth != null && 
                    request.resource.data.ownerId == request.auth.uid;

      // Allow project owners to read/update/delete their own projects
      allow read, update, delete: if request.auth != null &&
                         request.auth.uid == resource.data.ownerId;

      // Allow contractors to update projects for inquiries and acceptance requests
      allow update: if request.auth != null &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "contractor" &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'inquiredBy', 'contractorId', 'requestedBy']);

      // Allow admins to read/write all projects
      allow read, write: if request.auth != null &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Allow collection group queries on projects for contractors
    match /{path=**}/projects/{projectId} {
      allow read: if request.auth != null &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "contractor";
    }

    // availableProjects collection - used for contractor access
    match /availableProjects/{projectId} {
      // Anyone with contractor role can read available projects
      allow read: if request.auth != null &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "contractor";

      // Only admins and project owners can write
      allow write: if request.auth != null &&
                    (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
                     request.auth.uid == resource.data.ownerId);
    }

    // Conversations collection for messaging
    match /conversations/{conversationId} {
      // Allow authenticated users to query conversations collection
      allow list: if request.auth != null;
      
      // Allow any authenticated user to check if a conversation exists OR participants to read content
      allow get: if request.auth != null;

      // Allow both contractors and project owners to create conversations
      allow create: if request.auth != null && (
                    // Contractor creating conversation
                    (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "contractor" &&
                     request.resource.data.contractorId == request.auth.uid) ||
                    // Project owner creating conversation
                    (request.resource.data.customerId == request.auth.uid)
                    ) &&
                    // Always ensure participants array contains both customer and contractor
                    request.resource.data.participants.hasAll([request.resource.data.customerId, request.resource.data.contractorId]);

      // Allow participants to update conversations
      allow update: if request.auth != null &&
                   request.auth.uid in resource.data.participants;
    }

    // Messages subcollection within conversations
    match /conversations/{conversationId}/messages/{messageId} {
      // Allow participants to read and create messages
      allow read, create: if request.auth != null &&
                         exists(/databases/$(database)/documents/conversations/$(conversationId)) &&
                         request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }


    // Saved Materials collection for user favorites
    match /savedMaterials/{materialId} {
      // Allow users to read their own saved materials
      allow read: if request.auth != null && 
                  resource.data.userId == request.auth.uid;
      
      // Allow users to create and delete their own saved materials
      allow create: if request.auth != null && 
                   request.resource.data.userId == request.auth.uid;
      
      allow delete: if request.auth != null && 
                   resource.data.userId == request.auth.uid;
    }

    // Shopping carts
    match /carts/{userId} {
      // Allow users to read and write only their own cart
      allow read, write: if request.auth != null && 
                        request.auth.uid == userId;
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
